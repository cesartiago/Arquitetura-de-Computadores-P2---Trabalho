# Arquitetura-de-Computadores-P2---Trabalho
 - Trabalho Simulando no GNU Sim8085 - Arquitetura de Computadores P2
 
COISAS IMPORTANTES QUE EXPLICAM algumas coisas:

É bom que no programa, AO INVÉS de comp. e executar direto, aperte F5 para executar em partes e testar.

Muitas coisas nele está/se escreve em hexadecimal. Se você escreve 1h, quer dizer o número 1 em hexadecimal e não em binário ou decimal. (Nesse caso do número 1, em todos esses sistemas numéricos, o valor será 1 mesmo)

Entendendo como o GNU Sim 8085:
- Todos os valores que são operados/usados/mexidos no programa passam pelo registrador A. (localize os registradores no canto superior esquerdo)
- INCREMENTE (INR) ou DECREMENTE (DCR)
- Reg. e, fica escrito DE no canto superior esquerdo, o reg. "E" é o segundo "00", e não o primeiro, que é o registrador D)


Sobre loops:
O loop funciona com os "jumps" que é saltar para alguma linha. Quando você escreve um JUMP, como "JNZ" você precisa de escreve para onde você quer que pule, como:
jnz InicioDoLoopM (pula para linha onde está escrito "InicioDoLoopM:")
e em alguma linha, antes do código que você escreveu você terá que "declarar" o InicioDoLoopM: (<- escrevendo isto e colocando dois pontos que "declara")
O JNZ é um loop que pula quando a FLAG "Z" = 0. Z, o sinalizador zero é usado para verificar o resultado de uma operação aritmética, incluindo instruções lógicas bit a bit . É definido como 1, ou verdadeiro, se um resultado aritmético for zero e redefinido caso contrário. Isso inclui resultados que não são armazenados, 
a maioria dos conjuntos de instruções tradicionais implementa a instrução de comparação como uma subtração onde o resultado é descartado. Também é comum que os processadores tenham uma instrução AND bit a bit que não armazene o resultado.
